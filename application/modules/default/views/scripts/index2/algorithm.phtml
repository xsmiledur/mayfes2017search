<!DOCTYPE html>
<html>

<head>

    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">

    <title>第90回五月祭 企画展示経路探索</title>

    <link href="/Static_Full_Version/css/bootstrap.min.css" rel="stylesheet">
    <link href="/Static_Full_Version/font-awesome/css/font-awesome.css" rel="stylesheet">
    <link href="/Static_Full_Version/css/animate.css" rel="stylesheet">
    <link href="/Static_Full_Version/css/style.css" rel="stylesheet">

    <!-- common2 -->
    <link href="/css/common2.css" rel="stylesheet">



</head>

<body>



<div id="wrapper">

    <div id="page-wrapper" class="gray-bg" style="margin-left:0px;">
        <div class="wrapper wrapper-content animated fadeInRight">

            <div class="row">
                <div class="col-lg-12">
                    <div class="ibox" id="id">

                        <!--ここで高さ変更できる-->
                        <div class="ibox-content">

                            <div class="pull-left">
                                <a href="/index2" class="btn btn-white btn-xs" type="button"><i class="fa fa-mail-reply"></i> Back</a>

                            </div>
                            <div class="pull-right">
                                <button class="btn btn-white btn-xs" type="button">Model</button>
                                <button class="btn btn-white btn-xs" type="button">Publishing</button>
                                <button class="btn btn-white btn-xs" type="button">Modern</button>
                            </div>
                            <div class="text-center article-title">
                                <span class="text-muted"><i class="fa fa-clock-o"></i> 28th Oct 2015</span>
                                <h1>
                                    このアプリで使われているアルゴリズムの説明
                                </h1>
                            </div>
                            <h2>
                                ざっくりいうと
                            </h2>
                            <br>
                            <p>
                                アルゴリズム班が製作したこのアプリは簡単に言うと、みなさんが回りたいいくつかの展示を最短でいい感じに回る経路を求めるというものです。
                                <br>この最短経路検索には大きく分けて二つのアルゴリズムが使われています。
                            </p>

                            <p>
                                一つ目はすべての二つの展示の組み合わせに対して、最短距離と経路を求めるアルゴリズムです。
                                <br>今回のアプリではグラフ上での二点間を求めるためによく使われるダイクストラ法を使いました。
                                <br>ダイクストラ法によってあらかじめ全展示間の最短での移動時間を計算して保存しておきます。ダイクストラ法については後で書くので詳しく知りたい方は下の方を読んでみてください。
                            </p>

                            <p>
                                二つ目はみなさんが回りたい展示の列と現在地を受け取り、展示を回る順番を全通り列挙して必要な合計時間が一番小さくなるような回り方をぽん！っと出しちゃうアルゴリズムです。合計時間は一つ目のダイクストラ法で求めておいた二点間の距離を用いて求めます。
                                <br>その際、展示時間が固定されているような展示(演劇や演奏など上映時間が決められているもの)があったりしたら、その展示に間に合うような経路だけ返すようにしてあります。
                            </p>

                            <p>
                                まとめると
                                <br>
                                <div style="border:5px double #F9F;padding:10px;border-radius:10px;">
                                <strong>二つの展示の間の最短移動時間をすべての組み合わせに対してあらかじめ計算しておいて、みなさんが行きたい展示を並べ替えて求めておいた時間を合計して一番早いやつをぽん！っとだす！！</strong>
                            </div>
                            <br>
                            ということです。
                            </p>
                            <br>
                            <h2 class="alg">
                                2点間の最短の経路と移動時間を求めよう
                            </h2>
                            <br>
                            <p>
                                ダイクストラ法の説明をする前にグラフについて簡単に説明しておきます。
                                <br>
グラフと聞いて多くの人が最初に思い浮かべるのは棒グラフや折れ線グラフ、中高生であれば関数のグラフなどではないでしょうか。
今回のアルゴリズムでいうグラフとはこれらとは異なるもので、大まかに言うと頂点が辺で繋がれているような地図のようなものです。
<br>
単純なグラフには各辺には数字が振られていないのですが、以下のように辺に数字が割り当てられているグラフもあり、これを重み付きグラフといいます。今回のアルゴリズムではこの重み付きグラフを使います。ちなみに重み付きグラフはネットワークといい、割り当てられた数字を重みと言います。
今回のアプリケーションでは本郷キャンパスの各展示や交差点を頂点に、道を辺として重み付きグラフを作成しました。重み付きグラフなので先ほども述べた通り各辺には数字が割り当てられますが、ここではその道を移動するのにかかる時間を割り当てました。

                            </p>

                            <p>
                                ここまできたらやることがなんとなくわかってきたと思います。二つの頂点をつなぐ道の中で辺に振られている重みの合計が最小になるような道順を見つければいいということですね。
                                <br>では試しに下のグラフについて、頂点1から頂点5までの最短経路を探してみましょう。
                            </p>
                            <br>
                            <div align="center">
                                <img src="/img/graph.png" width="500" height="300" align="middle">    
                            </div>

                            <p>
                                <br>
                                見つけられたでしょうか？？最短経路は頂点1,2,3,5の順にたどっていくというものですが、大事なのは答えではなくその求め方にあります。
おそらく多くの方はしらみつぶしに片っ端から1から5に行ける道を辿って行って最短経路を求めたと思います。
<br>
このグラフでは規模が小さいので全部しらみつぶしに探して行ってもそこまで負担ではないのですが、想像してみてください。本郷キャンパスにはもっとたくさんの展示と道があります。そのグラフ上で先ほどと同じことをあなたはしたいでしょうか？また人間がやらないとしても、一つ一つ試していくのはコンピュータでも結構な時間がかかってしまいます。
                            </p>

                            <p>
                                というように、グラフが大きくなってしまう今回のアプリでは残念ながら最短経路を一つ一つ試していって求めるという方法は使うことができません。ここで、ようやくダイクストラ法の出番です。
                            </p>
                            <br>
                            <h2 class="alg">
                                よくあるたとえ話
                            </h2>
                            <br>
                            <p>
                                ここからいよいよダイクストラ法の中身について説明していきます。
                                <br>
いきなりダイクストラ法の細かい説明をするよりもまずイメージをつかんでほしいので、次のようなことを想像してみてください。
先ほど述べたグラフの頂点をビー玉に、辺をひもにしてみます。辺の距離と比例するように紐の長さも調整してあります。
<br>
このビー玉のうち、出発したい点を手に持って持ち上げていきます。どんどん他のビー玉も持ち上がっていき、終点にしたいビー玉が持ち上がる寸前に止めます。その時の手に持ってるビー玉の高さが始点と終点を結ぶ最短距離となります。ざっくりいうとこれがダイクストラ法の正体です。
                            </p>

                            <p>
                                これでダイクストラ法の全てがわかる人はすごいと思うのでふわっとイメージが湧いてくれたら嬉しいです。
このイメージを実際にプログラムではどうやってるんだという人のために以下にアルゴリズムの細かい部分を説明していきます。
                            </p>
                            <br>
                            <h2 class="alg">
                                具体的な手順
                            </h2>
                            <br>
                            <p>
                                先ほどのイメージになぞらえて話していくと、地面に接していない（持ち上がっている）ビー玉は最短距離が決まったグループ、地面にまだ接しているビー玉は最短距離が決まっていないグループということができます。ダイクストラ法ではこの最短距離が決まっていないグループから決まったグループに一つずつ移していき、終点が決まったグループに移ったら終了です。
                            </p>

                            <p>
                                最初、すべての頂点を最短経路が決まってないグループに入れておきます。各頂点の始点からの暫定での最短所要時間をすべて無限大に大きくしておき、始点の始点からの到達所要時間は0としておきます。
    それから以下のルールに従って点をグループからグループへ移動させていきます。
                            </p>

                            <div style="border:5px double #F9F;padding:10px;border-radius:10px;">~ルール~<br>
「最短経路が決まっていないグループ」のうち最短経路が一番小さいものを「最短経路が決まったグループ」に入れる。<br>
移した点と繋がっている点に対して、その点の暫定の最短所要時間よりも移した点を経由して行った場合の所要時間のほうが小さかったら暫定の最短所要時間を更新します。（おわり）
</div>
                            <p>
                                <br>
                                文章だけでは分かりづらいので実際に先ほど考えたグラフについてダイクストラ法を適用してみてグループ間の移動ルールを理解してみましょう。頂点は同じく1から5の最短経路を求めるという設定でやってみます。

                            </p>
                            <br>
                            <h2 class="alg">
                                実際にやってみよう
                            </h2>
                            <br>
                            <p>まず暫定の最短の所要時間は頂点1だけ0で、それ以外は無限大なので一番小さい頂点1が「最短経路が決まったグループ」に移されます。
                            </p>

                            <p>次に1から移動できる点2と3について、現在の暫定での最短所要時間（どちらも無限大）よりも頂点1から2や3に行った方が移動距離は小さくなるので暫定の最短距離を更新します。頂点2は頂点1からいくと50分、頂点3は頂点1からいくと80分であり、頂点1までの所要時間は0なのでこの二つの頂点の暫定の最短所要時間はそれぞれ50分,80分になります。（これで１ステップ終了）

                            </p>
                            <p>同様に「最短経路が決まっていないグループ」（頂点は2,3,4,5が残ってる）のうち一番暫定最短距離が短いもの（すなわち頂点２）を「最短経路が決まったグループ」に移します。
頂点2からいける点（頂点3,頂点4）に対して同様に最短での所要時間を更新します。頂点4については無限なので更新するのは当たり前ですが（更新すると50+15で65分になる）、3は1からもいけているのでそれよりも短い時間でいけるかを考えなければいけません。今回1から3に直接行くのにかかる80分（暫定での最短）よりも1から2に行って3に行くルート（2の最短距離50とそこからかかる20分を足して70分）を比べて70分の方が短いので3の暫定最短距離を80から70に更新することになります。（2ステップ終了）
                            </p>
                            <p>同様に「最短経路が決まっていないグループ」（頂点は3,4,5が残ってる）のうち一番暫定最短距離が短いもの（すなわち頂点４）を最短距離が決まったグループに移します。
また４からいける点に対して最短所要時間を更新して、、、と続けていき、５が「最短経路決定済みグループ」に移動したら終了です。各ステップにつき一つずつ頂点の最短経路が決定していく感じです。

                            </p>
                            <br>
                            <h2 class="alg">
                                なんでダイクストラ法がいいの？
                            </h2>
                            <br>
                            <p>この方法で最短距離を求めると、最短距離が決まっているかどうかをで分割するグループの実装の仕方にもよりますが辺の数の二乗ぐらいの計算時間がかかります。
                                <br>詳しくは計算時間のオーダーという問題に関わってくるのでここでは詳しくは説明できませんが、最初にやろうとした全部試していく愚直な方法では辺の数の階乗ぐらいの計算時間がかかります。
                                <br>二乗と階乗はどちらの方が大きくなるかというとこが気になってきますが、少し試してみるとわかるように階乗の方が圧倒的に早く大きくなっていくことがわかります。つまりダイクストラ法のほうが必要な計算時間の増え方が小さい分優れたやり方であると言えます。
                            </p>
                            <hr>
                            <div class="row">
                                <div class="col-md-6">
                                    <h5>Tags:</h5>
                                    <button class="btn btn-primary btn-xs" type="button">Model</button>
                                    <button class="btn btn-white btn-xs" type="button">Publishing</button>
                                </div>
                                <div class="col-md-6">
                                    <div class="small text-right">
                                        <h5>Stats:</h5>
                                        <div> <i class="fa fa-comments-o"> </i> 56 comments </div>
                                        <i class="fa fa-eye"> </i> 144 views
                                    </div>
                                </div>
                            </div>


                        </div>
                    </div>
                </div>

            </div>
        </div>
        <div class="footer">
            <!--<div class="pull-right">
                    10GB of <strong>250GB</strong> Free.
                </div>-->
            <div>
                <strong>Applied Physics ,University of Tokyo</strong> 東京大学工学部応用物理系 &copy; 2017
            </div>
        </div>

    </div>
</div>


<!--<script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.9.1/jquery.min.js"></script>-->
<script src="https://ajax.googleapis.com/ajax/libs/jquery/2.1.4/jquery.min.js"></script>

<!-- Mainly scripts -->
<script src="/Static_Full_Version/js/jquery-3.1.1.min.js"></script>
<script src="/Static_Full_Version/js/bootstrap.min.js"></script>
<script src="/Static_Full_Version/js/plugins/metisMenu/jquery.metisMenu.js"></script>
<script src="/Static_Full_Version/js/plugins/slimscroll/jquery.slimscroll.min.js"></script>

<!-- Custom and plugin javascript -->
<script src="/assets-admin/js/inspinia.js"></script>
<script src="/Static_Full_Version/js/plugins/pace/pace.min.js"></script>

<!-- Steps -->
<script src="/Static_Full_Version/js/plugins/steps/jquery.steps.min.js"></script>

<!-- Jquery Validate -->
<script src="/Static_Full_Version/js/plugins/validate/jquery.validate.min.js"></script>

<!-- iCheck -->
<script src="/Static_Full_Version/js/plugins/iCheck/icheck.min.js"></script>

<!-- Clock picker -->
<script src="/Static_Full_Version/js/plugins/clockpicker/clockpicker.js"></script>

<!-- Select2 -->
<script src="/Static_Full_Version/js/plugins/select2/select2.full.min.js"></script>

<!-- Chosen -->
<script src="/Static_Full_Version/js/plugins/chosen/chosen.jquery.js"></script>

<!-- Sweet alert -->
<script src="/Static_Full_Version/js/plugins/sweetalert/sweetalert.min.js"></script>

<script>
    $('.chosen-select').chosen({width: "15%"});

    $(document).ready(function(){
        $("#wizard").steps();
        $("#form").steps({
            bodyTag: "fieldset",
            onStepChanging: function (event, currentIndex, newIndex)
            {
                // Always allow going backward even if the current step contains invalid fields!
                if (currentIndex > newIndex)
                {
                    return true;
                }

                // Forbid suppressing "Warning" step if the user is to young
                /*
                 if (newIndex === 3 && Number($("#age").val()) < 18)
                 {
                 return false;
                 }
                 */
                var form = $(this);

                // Clean up if user went backward before
                if (currentIndex < newIndex)
                {
                    // To remove error styles
                    $(".body:eq(" + newIndex + ") label.error", form).remove();
                    $(".body:eq(" + newIndex + ") .error", form).removeClass("error");
                }

                // Disable validation on fields that are disabled or hidden.
                form.validate().settings.ignore = ":disabled,:hidden";

                // Start validation; Prevent going forward if false
                return form.valid();
            },
            onStepChanged: function (event, currentIndex, priorIndex)
            {
                // Suppress (skip) "Warning" step if the user is old enough.
                if (currentIndex === 2 && Number($("#age").val()) >= 18)
                {
                    $(this).steps("next");
                }

                /*
                 // Suppress (skip) "Warning" step if the user is old enough and wants to the previous step.
                 if (currentIndex === 2 && priorIndex === 3)
                 {
                 $(this).steps("previous");
                 }
                 */
            },
            onFinishing: function (event, currentIndex)
            {
                var form = $(this);

                var j = 0;

                for(i=1;i<10;i++) {
                    name = "input" + i;
                    hidden = $('[name=' + name + ']').val();
                    if (hidden) {
                        j = 1;
                        break;
                    }
                    console.log(name);
                    console.log(hidden);
                }

                // Disable validation on fields that are disabled.
                // At this point it's recommended to do an overall check (mean ignoring only disabled fields)
                form.validate().settings.ignore = ":disabled";

                // Start validation; Prevent form submission if false

                if (j == 1) {
                    return form.valid();
                } else {
                    swal({
                        title: "企画が選択されてません",
                        text: "検索するには、企画を１つ以上選択してください",
                        type: "warning",
                        confirmButtonColor: "#DD6B55",
                        confirmButtonText: "OK",
                        closeOnConfirm: false
                    });

                }
            },
            onFinished: function (event, currentIndex)
            {
                var form = $(this);

                // Submit form input
                form.submit();
            }
        }).validate({
            errorPlacement: function (error, element)
            {
                element.before(error);
            },
            rules: {
                confirm: {
                    equalTo: "#password"
                }
            }
        });

        //iCheck
        $('.i-checks').iCheck({
            checkboxClass: 'icheckbox_square-green',
            radioClass: 'iradio_square-green',
        });
        $('input').on('ifChecked', function(event){
            $("#jQuery1").toggle();
            // 「id="jQueryBox"」の表示、非表示を切り替える
            $("#jQuery2").toggle();
        });

        //clockpicker
        var input = $('#clock1').clockpicker({
            placement: 'bottom',
            align: 'left',
            //autoclose: true,
            'default': 'now'
        });
        $('#clock2').clockpicker({
            placement: 'bottom',
            align: 'left',
            //autoclose: true,
        });

        $('#input-clock1').change(function() {
            if ($('#input-clock1').val)
                $("#clockText1").text($('#input-clock1').val());
        });
        $('#input-clock2').change(function() {
            $("#clockText2").text($('#input-clock2').val());
        });

        //select2
        $(".select2_demo_1").select2();
        $(".select2_demo_2").select2();
        $(".select2_demo_3").select2({
            placeholder: "Select a state",
            allowClear: true
        });
    });

    $(function(){
        // 「id="jQueryBox"」を非表示
        $("#jQueryBox1").css("display", "none");

        // 「id="jQueryPush"」がクリックされた場合
        $("#jQueryPush1").click(function(){
            $("#jQueryPush1").toggle();
            // 「id="jQueryBox"」の表示、非表示を切り替える
            $("#jQueryBox1").toggle();
        });

        $("#jQueryBox1").click(function(){
            $("#jQueryPush1").toggle();
            // 「id="jQueryBox"」の表示、非表示を切り替える
            $("#jQueryBox1").toggle();
        });
    });

    $(function(){
        // 「id="jQueryBox"」を非表示
        $("#jQueryBox2").css("display", "none");

        // 「id="jQueryPush"」がクリックされた場合
        $("#jQueryPush2").click(function(){
            $("#jQueryPush2").toggle();
            // 「id="jQueryBox"」の表示、非表示を切り替える
            $("#jQueryBox2").toggle();
        });

        $("#jQueryBox2").click(function(){
            $("#jQueryPush2").toggle();
            // 「id="jQueryBox"」の表示、非表示を切り替える
            $("#jQueryBox2").toggle();
        });
    });

    $(function(){
        // 「id="jQueryBox"」を非表示
        $("#jQueryBox3").css("display", "none");

        // 「id="jQueryPush"」がクリックされた場合
        $("#jQueryPush3").click(function(){
            $("#jQueryPush3").toggle();
            // 「id="jQueryBox"」の表示、非表示を切り替える
            $("#jQueryBox3").toggle();
        });

        $("#jQueryBox3").click(function(){
            $("#jQueryPush3").toggle();
            // 「id="jQueryBox"」の表示、非表示を切り替える
            $("#jQueryBox3").toggle();
        });
    });

    $(function(){
        // 「id="jQueryBox"」を非表示
        $("#jQueryBox4").css("display", "none");

        // 「id="jQueryPush"」がクリックされた場合
        $("#jQueryPush4").click(function(){
            $("#jQueryPush4").toggle();
            // 「id="jQueryBox"」の表示、非表示を切り替える
            $("#jQueryBox4").toggle();
        });

        $("#jQueryBox4").click(function(){
            $("#jQueryPush4").toggle();
            // 「id="jQueryBox"」の表示、非表示を切り替える
            $("#jQueryBox4").toggle();
        });
    });

    //企画の項目を選んで表示
    $(function() {


        //キーワード検索
        $("#search_pid").on("select2:select", function () {
            pid = $(this).val();

            $.each(pid,
                function(index, elem) {
                    console.log(elem);

                    val = "#form_pid" + elem;

                    console.log(val);
                    $(val).show();

                    val1 = "input" + elem;
                    a = $('[name=' + val1 + ']').val(elem);
                    console.log(a);
                }
            );
        });

        //キーワード検索　消す
        $("#search_pid").on("select2:unselect", function (e) {
            val = "#form_pid" + e.params.data.id;
            //console.log(val);
            console.log(val);
            //console.log(e);


            $(val).hide();
            $('[name=val]').val();


        });



        $("#dropmenu").click(function (e) {
            e.stopPropagation(); // 追加
        });
        $("#dropmenu li").click(function (e) {
            e.stopPropagation(); // 追加
        });


    });

    $(function() {
        $("#pid1 a").click(function () {
            console.log(<?php echo $i; ?>);
            $("#form_pid1").toggle();
            $("#pid1 a").toggleClass("highlight");
            $("[name=input1]").val("1");
        });
        $("#pid2 a").click(function () {
            console.log(<?php echo $i; ?>);
            $("#form_pid2").toggle();
            $("#pid2 a").toggleClass("highlight");
            $("[name=input2]").val(2);
        });
        $("#pid3 a").click(function () {
            console.log(<?php echo $i; ?>);
            $("#form_pid3").toggle();
            $("#pid3 a").toggleClass("highlight");
            $("[name=input3]").val(3);
        });
        $("#pid4 a").click(function () {
            console.log(<?php echo $i; ?>);
            $("#form_pid4").toggle();
            $("#pid4 a").toggleClass("highlight");
            $("[name=input4]").val(4);
        });
        $("#pid5 a").click(function () {
            console.log(<?php echo $i; ?>);
            $("#form_pid5").toggle();
            $("#pid5 a").toggleClass("highlight");
            $("[name=input5]").val(5);
        });
        $("#pid6 a").click(function () {
            console.log(<?php echo $i; ?>);
            $("#form_pid6").toggle();
            $("#pid6 a").toggleClass("highlight");
            $("n[ame=input6]").val(6);
        });
        $("#pid7 a").click(function () {
            console.log(<?php echo $i; ?>);
            $("#form_pid7").toggle();
            $("#pid7 a").toggleClass("highlight");
            $("[name=input7]").val(7);
        });
        $("#pid8 a").click(function () {
            console.log(<?php echo $i; ?>);
            $("#form_pid8").toggle();
            $("#pid8 a").toggleClass("highlight");
            $("[name=input8]").val(8);
        });
        $("#pid9 a").click(function () {
            console.log(<?php echo $i; ?>);
            $("#form_pid9").toggle();
            $("#pid9 a").toggleClass("highlight");
            $("[name=input9]").val(9);
        });
        $("#pid10 a").click(function () {
            console.log(<?php echo $i; ?>);
            $("#form_pid10").toggle();
            $("#pid10 a").toggleClass("highlight");
            $("[name=input10]").val(10);
        });
        $("#pid11 a").click(function () {
            console.log(<?php echo $i; ?>);
            $("#form_pid11").toggle();
            $("#pid11 a").toggleClass("highlight");
            $("[name=input11]").val(11);
        });
        $("#pid12 a").click(function () {
            console.log(<?php echo $i; ?>);
            $("#form_pid12").toggle();
            $("#pid12 a").toggleClass("highlight");
            $("[name=input12]").val(12);
        });
        $("#pid13 a").click(function () {
            console.log(<?php echo $i; ?>);
            $("#form_pid13").toggle();
            $("#pid13 a").toggleClass("highlight");
            $("[name=input13]").val(13);
        });
        $("#pid14 a").click(function () {
            console.log(<?php echo $i; ?>);
            $("#form_pid14").toggle();
            $("#pid14 a").toggleClass("highlight");
            $("[name=input14]").val(14);
        });
        $("#pid15 a").click(function () {
            console.log(<?php echo $i; ?>);
            $("#form_pid15").toggle();
            $("#pid15 a").toggleClass("highlight");
            $("[name=input15]").val(15);
        });
        $("#pid16 a").click(function () {
            console.log(<?php echo $i; ?>);
            $("#form_pid16").toggle();
            $("#pid16 a").toggleClass("highlight");
            $("[name=input16]").val(16);
        });
        $("#pid1 a").click(function () {
            console.log(<?php echo $i; ?>);
            $("#form_pid17").toggle();
            $("#pid17 a").toggleClass("highlight");
            $("[name=input17]").val(17);
        });
        $("#pid18 a").click(function () {
            console.log(<?php echo $i; ?>);
            $("#form_pid18").toggle();
            $("#pid18 a").toggleClass("highlight");
            $("[name=input18]").val(18);
        });
        $("#pid19 a").click(function () {
            console.log(<?php echo $i; ?>);
            $("#form_pid19").toggle();
            $("#pid19 a").toggleClass("highlight");
            $("[name=input19]").val(19);
        });
        $("#pid20 a").click(function () {
            console.log(<?php echo $i; ?>);
            $("#form_pid20").toggle();
            $("#pid20 a").toggleClass("highlight");
            $("[name=input20]").val(20);
        });
        $("#pid21 a").click(function () {
            console.log(<?php echo $i; ?>);
            $("#form_pid21").toggle();
            $("#pid21 a").toggleClass("highlight");
            $("[name=input21]").val(21);
        });
        $("#pid22 a").click(function () {
            console.log(<?php echo $i; ?>);
            $("#form_pid22").toggle();
            $("#pid22 a").toggleClass("highlight");
            $("[name=input22]").val(22);
        });
        $("#pid23 a").click(function () {
            console.log(<?php echo $i; ?>);
            $("#form_pid23").toggle();
            $("#pid23 a").toggleClass("highlight");
            $("[name=input23]").val(23);
        });
        $("#pid24 a").click(function () {
            console.log(<?php echo $i; ?>);
            $("#form_pid24").toggle();
            $("#pid24 a").toggleClass("highlight");
            $("[name=input24]").val(24);
        });
    });

    $(document).ready(function () {

        $('#ap').click(function (e) {
            e.stopPropagation();
            swal({
                title: "工学部応用物理系ってなあに？",
                text: "You will not be able to recover this imaginary file!",
                type: "warning",
                showCancelButton: true,
                confirmButtonColor: "#DD6B55",
                confirmButtonText: "詳細が知りたい！",
                closeOnConfirm: false,
                allowOutsideClick: true,
            }, function () {
                window.location.href = "";
            });
        });
    });

    //ページ内ゆっくり遷移

    $(function(){
        $('a[href="#id"]').click(function(){
            var speed = 500;
            var href= $(this).attr("href");
            var target = $('#id');
            var position = target.offset().top;
            $("html, body").animate({scrollTop:position}, speed, "swing");
            return false;
        });
    });




    /*
     $("#pid<?php echo $i; ?> a").click(function () {
     $("#form_pid<?php echo $i; ?>").toggle(
     function () {
     $("#pid<?php echo $i; ?> a").css("background-color", "#ff1111");
     },
     function () {
     $("#pid<?php echo $i; ?> a").css("background-color","#ffe222");
     }
     );
     });
     */

    //var $eventSelect = $("#search_pid");

    //$eventSelect.on("change", function (e) { log("change"); });

    //キーワード検索用

    /*
     $('#search_pid').on('select2:select',function(e){
     val = ($(this).val());
     console.log(val);
     });
     */




    /*$("#form_pid".val).toggle();
     e.stopPropagation(); // 追加
     */
    //$("#pid".val." a").toggleClass("highlight");
    //$('[name="input".val]').val(<?php echo $i; ?>);



</script>

</body>

</html>
